# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Gateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_alert': 'datetime',
        'last_seen': 'datetime',
        'message': 'str',
        'name': 'str',
        'paired': 'str',
        'tags': 'dict(str, Tags)',
        'version': 'str'
    }

    attribute_map = {
        'last_alert': 'last_alert',
        'last_seen': 'last_seen',
        'message': 'message',
        'name': 'name',
        'paired': 'paired',
        'tags': 'tags',
        'version': 'version'
    }

    def __init__(self, last_alert=None, last_seen=None, message=None, name=None, paired=None, tags=None, version=None):  # noqa: E501
        """Gateway - a model defined in Swagger"""  # noqa: E501
        self._last_alert = None
        self._last_seen = None
        self._message = None
        self._name = None
        self._paired = None
        self._tags = None
        self._version = None
        self.discriminator = None
        if last_alert is not None:
            self.last_alert = last_alert
        if last_seen is not None:
            self.last_seen = last_seen
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if paired is not None:
            self.paired = paired
        if tags is not None:
            self.tags = tags
        if version is not None:
            self.version = version

    @property
    def last_alert(self):
        """Gets the last_alert of this Gateway.  # noqa: E501

        Date last alert was sent  # noqa: E501

        :return: The last_alert of this Gateway.  # noqa: E501
        :rtype: datetime
        """
        return self._last_alert

    @last_alert.setter
    def last_alert(self, last_alert):
        """Sets the last_alert of this Gateway.

        Date last alert was sent  # noqa: E501

        :param last_alert: The last_alert of this Gateway.  # noqa: E501
        :type: datetime
        """

        self._last_alert = last_alert

    @property
    def last_seen(self):
        """Gets the last_seen of this Gateway.  # noqa: E501

        Date the gateway was last seen  # noqa: E501

        :return: The last_seen of this Gateway.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Gateway.

        Date the gateway was last seen  # noqa: E501

        :param last_seen: The last_seen of this Gateway.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def message(self):
        """Gets the message of this Gateway.  # noqa: E501

        Detailed message associated with the gateway status.  # noqa: E501

        :return: The message of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Gateway.

        Detailed message associated with the gateway status.  # noqa: E501

        :param message: The message of this Gateway.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this Gateway.  # noqa: E501

        Name associated with a gateway  # noqa: E501

        :return: The name of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Gateway.

        Name associated with a gateway  # noqa: E501

        :param name: The name of this Gateway.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def paired(self):
        """Gets the paired of this Gateway.  # noqa: E501

        Gateway is paired with a bluetooth device  # noqa: E501

        :return: The paired of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._paired

    @paired.setter
    def paired(self, paired):
        """Sets the paired of this Gateway.

        Gateway is paired with a bluetooth device  # noqa: E501

        :param paired: The paired of this Gateway.  # noqa: E501
        :type: str
        """

        self._paired = paired

    @property
    def tags(self):
        """Gets the tags of this Gateway.  # noqa: E501

        List of tags associated with this device  # noqa: E501

        :return: The tags of this Gateway.  # noqa: E501
        :rtype: dict(str, Tags)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Gateway.

        List of tags associated with this device  # noqa: E501

        :param tags: The tags of this Gateway.  # noqa: E501
        :type: dict(str, Tags)
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this Gateway.  # noqa: E501

        Version of Sensorpush software  # noqa: E501

        :return: The version of this Gateway.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Gateway.

        Version of Sensorpush software  # noqa: E501

        :param version: The version of this Gateway.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Gateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
