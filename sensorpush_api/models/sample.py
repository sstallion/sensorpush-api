# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Sample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'altitude': 'float',
        'barometric_pressure': 'float',
        'dewpoint': 'float',
        'humidity': 'float',
        'observed': 'datetime',
        'tags': 'dict(str, Tags)',
        'temperature': 'float',
        'vpd': 'float'
    }

    attribute_map = {
        'altitude': 'altitude',
        'barometric_pressure': 'barometric_pressure',
        'dewpoint': 'dewpoint',
        'humidity': 'humidity',
        'observed': 'observed',
        'tags': 'tags',
        'temperature': 'temperature',
        'vpd': 'vpd'
    }

    def __init__(self, altitude=None, barometric_pressure=None, dewpoint=None, humidity=None, observed=None, tags=None, temperature=None, vpd=None):  # noqa: E501
        """Sample - a model defined in Swagger"""  # noqa: E501
        self._altitude = None
        self._barometric_pressure = None
        self._dewpoint = None
        self._humidity = None
        self._observed = None
        self._tags = None
        self._temperature = None
        self._vpd = None
        self.discriminator = None
        if altitude is not None:
            self.altitude = altitude
        if barometric_pressure is not None:
            self.barometric_pressure = barometric_pressure
        if dewpoint is not None:
            self.dewpoint = dewpoint
        if humidity is not None:
            self.humidity = humidity
        if observed is not None:
            self.observed = observed
        if tags is not None:
            self.tags = tags
        if temperature is not None:
            self.temperature = temperature
        if vpd is not None:
            self.vpd = vpd

    @property
    def altitude(self):
        """Gets the altitude of this Sample.  # noqa: E501

        Value unit is feet (ft)  # noqa: E501

        :return: The altitude of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Sample.

        Value unit is feet (ft)  # noqa: E501

        :param altitude: The altitude of this Sample.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def barometric_pressure(self):
        """Gets the barometric_pressure of this Sample.  # noqa: E501

        Value unit is inch of mercury (inHg)  # noqa: E501

        :return: The barometric_pressure of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._barometric_pressure

    @barometric_pressure.setter
    def barometric_pressure(self, barometric_pressure):
        """Sets the barometric_pressure of this Sample.

        Value unit is inch of mercury (inHg)  # noqa: E501

        :param barometric_pressure: The barometric_pressure of this Sample.  # noqa: E501
        :type: float
        """

        self._barometric_pressure = barometric_pressure

    @property
    def dewpoint(self):
        """Gets the dewpoint of this Sample.  # noqa: E501

        Value unit is farenheit (째F)  # noqa: E501

        :return: The dewpoint of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._dewpoint

    @dewpoint.setter
    def dewpoint(self, dewpoint):
        """Sets the dewpoint of this Sample.

        Value unit is farenheit (째F)  # noqa: E501

        :param dewpoint: The dewpoint of this Sample.  # noqa: E501
        :type: float
        """

        self._dewpoint = dewpoint

    @property
    def humidity(self):
        """Gets the humidity of this Sample.  # noqa: E501

        Value unit is percentage (%)  # noqa: E501

        :return: The humidity of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Sample.

        Value unit is percentage (%)  # noqa: E501

        :param humidity: The humidity of this Sample.  # noqa: E501
        :type: float
        """

        self._humidity = humidity

    @property
    def observed(self):
        """Gets the observed of this Sample.  # noqa: E501

        Date time when sample was observed.  # noqa: E501

        :return: The observed of this Sample.  # noqa: E501
        :rtype: datetime
        """
        return self._observed

    @observed.setter
    def observed(self, observed):
        """Sets the observed of this Sample.

        Date time when sample was observed.  # noqa: E501

        :param observed: The observed of this Sample.  # noqa: E501
        :type: datetime
        """

        self._observed = observed

    @property
    def tags(self):
        """Gets the tags of this Sample.  # noqa: E501

        List of tags associated with this device  # noqa: E501

        :return: The tags of this Sample.  # noqa: E501
        :rtype: dict(str, Tags)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Sample.

        List of tags associated with this device  # noqa: E501

        :param tags: The tags of this Sample.  # noqa: E501
        :type: dict(str, Tags)
        """

        self._tags = tags

    @property
    def temperature(self):
        """Gets the temperature of this Sample.  # noqa: E501

        Value unit is farenheit (째F)  # noqa: E501

        :return: The temperature of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Sample.

        Value unit is farenheit (째F)  # noqa: E501

        :param temperature: The temperature of this Sample.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def vpd(self):
        """Gets the vpd of this Sample.  # noqa: E501

        Value unit is kPa  # noqa: E501

        :return: The vpd of this Sample.  # noqa: E501
        :rtype: float
        """
        return self._vpd

    @vpd.setter
    def vpd(self, vpd):
        """Sets the vpd of this Sample.

        Value unit is kPa  # noqa: E501

        :param vpd: The vpd of this Sample.  # noqa: E501
        :type: float
        """

        self._vpd = vpd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
