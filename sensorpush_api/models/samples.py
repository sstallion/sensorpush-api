# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Samples(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_time': 'datetime',
        'sensors': 'dict(str, list[Sample])',
        'status': 'str',
        'total_samples': 'float',
        'total_sensors': 'float',
        'truncated': 'bool'
    }

    attribute_map = {
        'last_time': 'last_time',
        'sensors': 'sensors',
        'status': 'status',
        'total_samples': 'total_samples',
        'total_sensors': 'total_sensors',
        'truncated': 'truncated'
    }

    def __init__(self, last_time=None, sensors=None, status=None, total_samples=None, total_sensors=None, truncated=None):  # noqa: E501
        """Samples - a model defined in Swagger"""  # noqa: E501
        self._last_time = None
        self._sensors = None
        self._status = None
        self._total_samples = None
        self._total_sensors = None
        self._truncated = None
        self.discriminator = None
        if last_time is not None:
            self.last_time = last_time
        if sensors is not None:
            self.sensors = sensors
        if status is not None:
            self.status = status
        if total_samples is not None:
            self.total_samples = total_samples
        if total_sensors is not None:
            self.total_sensors = total_sensors
        if truncated is not None:
            self.truncated = truncated

    @property
    def last_time(self):
        """Gets the last_time of this Samples.  # noqa: E501

        ISO date time of the last sample returned. Use this as the start_ts to query for the next page of samples.  # noqa: E501

        :return: The last_time of this Samples.  # noqa: E501
        :rtype: datetime
        """
        return self._last_time

    @last_time.setter
    def last_time(self, last_time):
        """Sets the last_time of this Samples.

        ISO date time of the last sample returned. Use this as the start_ts to query for the next page of samples.  # noqa: E501

        :param last_time: The last_time of this Samples.  # noqa: E501
        :type: datetime
        """

        self._last_time = last_time

    @property
    def sensors(self):
        """Gets the sensors of this Samples.  # noqa: E501

        Map of sensors and the associated samples.  # noqa: E501

        :return: The sensors of this Samples.  # noqa: E501
        :rtype: dict(str, list[Sample])
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this Samples.

        Map of sensors and the associated samples.  # noqa: E501

        :param sensors: The sensors of this Samples.  # noqa: E501
        :type: dict(str, list[Sample])
        """

        self._sensors = sensors

    @property
    def status(self):
        """Gets the status of this Samples.  # noqa: E501

        Message describing state of the api call.  # noqa: E501

        :return: The status of this Samples.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Samples.

        Message describing state of the api call.  # noqa: E501

        :param status: The status of this Samples.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_samples(self):
        """Gets the total_samples of this Samples.  # noqa: E501

        Total number of samples across all sensors  # noqa: E501

        :return: The total_samples of this Samples.  # noqa: E501
        :rtype: float
        """
        return self._total_samples

    @total_samples.setter
    def total_samples(self, total_samples):
        """Sets the total_samples of this Samples.

        Total number of samples across all sensors  # noqa: E501

        :param total_samples: The total_samples of this Samples.  # noqa: E501
        :type: float
        """

        self._total_samples = total_samples

    @property
    def total_sensors(self):
        """Gets the total_sensors of this Samples.  # noqa: E501

        Total number of sensors returned  # noqa: E501

        :return: The total_sensors of this Samples.  # noqa: E501
        :rtype: float
        """
        return self._total_sensors

    @total_sensors.setter
    def total_sensors(self, total_sensors):
        """Sets the total_sensors of this Samples.

        Total number of sensors returned  # noqa: E501

        :param total_sensors: The total_sensors of this Samples.  # noqa: E501
        :type: float
        """

        self._total_sensors = total_sensors

    @property
    def truncated(self):
        """Gets the truncated of this Samples.  # noqa: E501

        The query returned too many results, causing the sample list to be truncated. Consider adjusting the limit or startTime parameters.  # noqa: E501

        :return: The truncated of this Samples.  # noqa: E501
        :rtype: bool
        """
        return self._truncated

    @truncated.setter
    def truncated(self, truncated):
        """Sets the truncated of this Samples.

        The query returned too many results, causing the sample list to be truncated. Consider adjusting the limit or startTime parameters.  # noqa: E501

        :param truncated: The truncated of this Samples.  # noqa: E501
        :type: bool
        """

        self._truncated = truncated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Samples, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Samples):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
