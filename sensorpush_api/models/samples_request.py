# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SamplesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'bulk': 'bool',
        'format': 'str',
        'limit': 'int',
        'measures': 'list[str]',
        'sensors': 'list[str]',
        'start_time': 'str',
        'stop_time': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'active': 'active',
        'bulk': 'bulk',
        'format': 'format',
        'limit': 'limit',
        'measures': 'measures',
        'sensors': 'sensors',
        'start_time': 'startTime',
        'stop_time': 'stopTime',
        'tags': 'tags'
    }

    def __init__(self, active=None, bulk=None, format=None, limit=None, measures=None, sensors=None, start_time=None, stop_time=None, tags=None):  # noqa: E501
        """SamplesRequest - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._bulk = None
        self._format = None
        self._limit = None
        self._measures = None
        self._sensors = None
        self._start_time = None
        self._stop_time = None
        self._tags = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if bulk is not None:
            self.bulk = bulk
        if format is not None:
            self.format = format
        if limit is not None:
            self.limit = limit
        if measures is not None:
            self.measures = measures
        if sensors is not None:
            self.sensors = sensors
        if start_time is not None:
            self.start_time = start_time
        if stop_time is not None:
            self.stop_time = stop_time
        if tags is not None:
            self.tags = tags

    @property
    def active(self):
        """Gets the active of this SamplesRequest.  # noqa: E501

        Filters sensors by active = (true|false). Defaults to true.  # noqa: E501

        :return: The active of this SamplesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SamplesRequest.

        Filters sensors by active = (true|false). Defaults to true.  # noqa: E501

        :param active: The active of this SamplesRequest.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def bulk(self):
        """Gets the bulk of this SamplesRequest.  # noqa: E501

        Queries that return large results are truncated (see comments on Samples endpoint). Set this flag to true for large reports. The report request will be queued and processed within 24 hours. Upon completion, the primary account holder will recieve an email with a link for download.  # noqa: E501

        :return: The bulk of this SamplesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._bulk

    @bulk.setter
    def bulk(self, bulk):
        """Sets the bulk of this SamplesRequest.

        Queries that return large results are truncated (see comments on Samples endpoint). Set this flag to true for large reports. The report request will be queued and processed within 24 hours. Upon completion, the primary account holder will recieve an email with a link for download.  # noqa: E501

        :param bulk: The bulk of this SamplesRequest.  # noqa: E501
        :type: bool
        """

        self._bulk = bulk

    @property
    def format(self):
        """Gets the format of this SamplesRequest.  # noqa: E501

        Returns the results as the specified format (csv|json). Defaults to json  # noqa: E501

        :return: The format of this SamplesRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SamplesRequest.

        Returns the results as the specified format (csv|json). Defaults to json  # noqa: E501

        :param format: The format of this SamplesRequest.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def limit(self):
        """Gets the limit of this SamplesRequest.  # noqa: E501

        Number of samples to return.  # noqa: E501

        :return: The limit of this SamplesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SamplesRequest.

        Number of samples to return.  # noqa: E501

        :param limit: The limit of this SamplesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def measures(self):
        """Gets the measures of this SamplesRequest.  # noqa: E501

        Specifies which measures to include (\"temperature\"|\"humidity\"|\"vpd\"|\"barometric_pressure\"|\"dewpoint\"). Note some measures are not available on older devices.  # noqa: E501

        :return: The measures of this SamplesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._measures

    @measures.setter
    def measures(self, measures):
        """Sets the measures of this SamplesRequest.

        Specifies which measures to include (\"temperature\"|\"humidity\"|\"vpd\"|\"barometric_pressure\"|\"dewpoint\"). Note some measures are not available on older devices.  # noqa: E501

        :param measures: The measures of this SamplesRequest.  # noqa: E501
        :type: list[str]
        """

        self._measures = measures

    @property
    def sensors(self):
        """Gets the sensors of this SamplesRequest.  # noqa: E501

        Filters samples by sensor id. This will be the same id returned in the sensors api call. The parameter value must be a list of strings. Example: sensors: [\"123.56789\"].  # noqa: E501

        :return: The sensors of this SamplesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this SamplesRequest.

        Filters samples by sensor id. This will be the same id returned in the sensors api call. The parameter value must be a list of strings. Example: sensors: [\"123.56789\"].  # noqa: E501

        :param sensors: The sensors of this SamplesRequest.  # noqa: E501
        :type: list[str]
        """

        self._sensors = sensors

    @property
    def start_time(self):
        """Gets the start_time of this SamplesRequest.  # noqa: E501

        Start time to find samples (example: 2019-04-07T00:00:00-0400). Leave blank or zero to get the most recent samples.  # noqa: E501

        :return: The start_time of this SamplesRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SamplesRequest.

        Start time to find samples (example: 2019-04-07T00:00:00-0400). Leave blank or zero to get the most recent samples.  # noqa: E501

        :param start_time: The start_time of this SamplesRequest.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def stop_time(self):
        """Gets the stop_time of this SamplesRequest.  # noqa: E501

        Stop time to find samples (example: 2019-04-07T10:30:00-0400). Leave blank or zero to get the most recent samples.  # noqa: E501

        :return: The stop_time of this SamplesRequest.  # noqa: E501
        :rtype: str
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time):
        """Sets the stop_time of this SamplesRequest.

        Stop time to find samples (example: 2019-04-07T10:30:00-0400). Leave blank or zero to get the most recent samples.  # noqa: E501

        :param stop_time: The stop_time of this SamplesRequest.  # noqa: E501
        :type: str
        """

        self._stop_time = stop_time

    @property
    def tags(self):
        """Gets the tags of this SamplesRequest.  # noqa: E501

        Filters samples by associated tags.  # noqa: E501

        :return: The tags of this SamplesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SamplesRequest.

        Filters samples by associated tags.  # noqa: E501

        :param tags: The tags of this SamplesRequest.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamplesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamplesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
