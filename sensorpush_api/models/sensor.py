# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Sensor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'address': 'str',
        'alerts': 'SensorAlerts',
        'battery_voltage': 'float',
        'calibration': 'SensorCalibration',
        'device_id': 'str',
        'id': 'str',
        'name': 'str',
        'rssi': 'float',
        'tags': 'dict(str, Tags)',
        'type': 'str'
    }

    attribute_map = {
        'active': 'active',
        'address': 'address',
        'alerts': 'alerts',
        'battery_voltage': 'battery_voltage',
        'calibration': 'calibration',
        'device_id': 'deviceId',
        'id': 'id',
        'name': 'name',
        'rssi': 'rssi',
        'tags': 'tags',
        'type': 'type'
    }

    def __init__(self, active=None, address=None, alerts=None, battery_voltage=None, calibration=None, device_id=None, id=None, name=None, rssi=None, tags=None, type=None):  # noqa: E501
        """Sensor - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._address = None
        self._alerts = None
        self._battery_voltage = None
        self._calibration = None
        self._device_id = None
        self._id = None
        self._name = None
        self._rssi = None
        self._tags = None
        self._type = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if address is not None:
            self.address = address
        if alerts is not None:
            self.alerts = alerts
        if battery_voltage is not None:
            self.battery_voltage = battery_voltage
        if calibration is not None:
            self.calibration = calibration
        if device_id is not None:
            self.device_id = device_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if rssi is not None:
            self.rssi = rssi
        if tags is not None:
            self.tags = tags
        if type is not None:
            self.type = type

    @property
    def active(self):
        """Gets the active of this Sensor.  # noqa: E501

        Is the sensor active?  # noqa: E501

        :return: The active of this Sensor.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Sensor.

        Is the sensor active?  # noqa: E501

        :param active: The active of this Sensor.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def address(self):
        """Gets the address of this Sensor.  # noqa: E501

        MAC address  # noqa: E501

        :return: The address of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Sensor.

        MAC address  # noqa: E501

        :param address: The address of this Sensor.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def alerts(self):
        """Gets the alerts of this Sensor.  # noqa: E501


        :return: The alerts of this Sensor.  # noqa: E501
        :rtype: SensorAlerts
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this Sensor.


        :param alerts: The alerts of this Sensor.  # noqa: E501
        :type: SensorAlerts
        """

        self._alerts = alerts

    @property
    def battery_voltage(self):
        """Gets the battery_voltage of this Sensor.  # noqa: E501

        Current battery voltage  # noqa: E501

        :return: The battery_voltage of this Sensor.  # noqa: E501
        :rtype: float
        """
        return self._battery_voltage

    @battery_voltage.setter
    def battery_voltage(self, battery_voltage):
        """Sets the battery_voltage of this Sensor.

        Current battery voltage  # noqa: E501

        :param battery_voltage: The battery_voltage of this Sensor.  # noqa: E501
        :type: float
        """

        self._battery_voltage = battery_voltage

    @property
    def calibration(self):
        """Gets the calibration of this Sensor.  # noqa: E501


        :return: The calibration of this Sensor.  # noqa: E501
        :rtype: SensorCalibration
        """
        return self._calibration

    @calibration.setter
    def calibration(self, calibration):
        """Sets the calibration of this Sensor.


        :param calibration: The calibration of this Sensor.  # noqa: E501
        :type: SensorCalibration
        """

        self._calibration = calibration

    @property
    def device_id(self):
        """Gets the device_id of this Sensor.  # noqa: E501

        Short device Id  # noqa: E501

        :return: The device_id of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Sensor.

        Short device Id  # noqa: E501

        :param device_id: The device_id of this Sensor.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def id(self):
        """Gets the id of this Sensor.  # noqa: E501

        Long device Id  # noqa: E501

        :return: The id of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sensor.

        Long device Id  # noqa: E501

        :param id: The id of this Sensor.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Sensor.  # noqa: E501

        Name of the sensor sensor  # noqa: E501

        :return: The name of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sensor.

        Name of the sensor sensor  # noqa: E501

        :param name: The name of this Sensor.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rssi(self):
        """Gets the rssi of this Sensor.  # noqa: E501

        Wireless signal strength in dB at last reading  # noqa: E501

        :return: The rssi of this Sensor.  # noqa: E501
        :rtype: float
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this Sensor.

        Wireless signal strength in dB at last reading  # noqa: E501

        :param rssi: The rssi of this Sensor.  # noqa: E501
        :type: float
        """

        self._rssi = rssi

    @property
    def tags(self):
        """Gets the tags of this Sensor.  # noqa: E501

        List of tags associated with this device  # noqa: E501

        :return: The tags of this Sensor.  # noqa: E501
        :rtype: dict(str, Tags)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Sensor.

        List of tags associated with this device  # noqa: E501

        :param tags: The tags of this Sensor.  # noqa: E501
        :type: dict(str, Tags)
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Sensor.  # noqa: E501

        Type of device hardward  # noqa: E501

        :return: The type of this Sensor.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Sensor.

        Type of device hardward  # noqa: E501

        :param type: The type of this Sensor.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sensor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sensor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
