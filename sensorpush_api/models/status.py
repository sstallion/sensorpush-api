# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployed': 'str',
        'message': 'str',
        'ms': 'int',
        'stack': 'str',
        'status': 'str',
        'time': 'str',
        'version': 'str'
    }

    attribute_map = {
        'deployed': 'deployed',
        'message': 'message',
        'ms': 'ms',
        'stack': 'stack',
        'status': 'status',
        'time': 'time',
        'version': 'version'
    }

    def __init__(self, deployed=None, message=None, ms=None, stack=None, status=None, time=None, version=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._deployed = None
        self._message = None
        self._ms = None
        self._stack = None
        self._status = None
        self._time = None
        self._version = None
        self.discriminator = None
        if deployed is not None:
            self.deployed = deployed
        self.message = message
        if ms is not None:
            self.ms = ms
        if stack is not None:
            self.stack = stack
        if status is not None:
            self.status = status
        if time is not None:
            self.time = time
        if version is not None:
            self.version = version

    @property
    def deployed(self):
        """Gets the deployed of this Status.  # noqa: E501

        Date time when this service was last updated.  # noqa: E501

        :return: The deployed of this Status.  # noqa: E501
        :rtype: str
        """
        return self._deployed

    @deployed.setter
    def deployed(self, deployed):
        """Sets the deployed of this Status.

        Date time when this service was last updated.  # noqa: E501

        :param deployed: The deployed of this Status.  # noqa: E501
        :type: str
        """

        self._deployed = deployed

    @property
    def message(self):
        """Gets the message of this Status.  # noqa: E501

        Greeting message.  # noqa: E501

        :return: The message of this Status.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Status.

        Greeting message.  # noqa: E501

        :param message: The message of this Status.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def ms(self):
        """Gets the ms of this Status.  # noqa: E501

        Current date time on the server in milliseconds.  # noqa: E501

        :return: The ms of this Status.  # noqa: E501
        :rtype: int
        """
        return self._ms

    @ms.setter
    def ms(self, ms):
        """Sets the ms of this Status.

        Current date time on the server in milliseconds.  # noqa: E501

        :param ms: The ms of this Status.  # noqa: E501
        :type: int
        """

        self._ms = ms

    @property
    def stack(self):
        """Gets the stack of this Status.  # noqa: E501

        Active stack hosting this service.  # noqa: E501

        :return: The stack of this Status.  # noqa: E501
        :rtype: str
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """Sets the stack of this Status.

        Active stack hosting this service.  # noqa: E501

        :param stack: The stack of this Status.  # noqa: E501
        :type: str
        """

        self._stack = stack

    @property
    def status(self):
        """Gets the status of this Status.  # noqa: E501

        Current status of the api service.  # noqa: E501

        :return: The status of this Status.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status.

        Current status of the api service.  # noqa: E501

        :param status: The status of this Status.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def time(self):
        """Gets the time of this Status.  # noqa: E501

        Current date time on the server.  # noqa: E501

        :return: The time of this Status.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Status.

        Current date time on the server.  # noqa: E501

        :param time: The time of this Status.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def version(self):
        """Gets the version of this Status.  # noqa: E501

        Version of this service currently deployed  # noqa: E501

        :return: The version of this Status.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Status.

        Version of this service currently deployed  # noqa: E501

        :param version: The version of this Status.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
