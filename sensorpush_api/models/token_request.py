# coding: utf-8

"""
    SensorPush Public API

    This is a swagger definition for the SensorPush public REST API. Download the definition file [here](https://api.sensorpush.com/api/v1/support/swagger/swagger-v1.json).  # noqa: E501

    OpenAPI spec version: v1.0.20240629
    Contact: support@sensorpush.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'code': 'str',
        'grant_type': 'str',
        'password': 'str',
        'redirect_uri': 'str',
        'refresh_token': 'str',
        'username': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'code': 'code',
        'grant_type': 'grant_type',
        'password': 'password',
        'redirect_uri': 'redirect_uri',
        'refresh_token': 'refresh_token',
        'username': 'username'
    }

    def __init__(self, client_id=None, client_secret=None, code=None, grant_type=None, password=None, redirect_uri=None, refresh_token=None, username=None):  # noqa: E501
        """TokenRequest - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._client_secret = None
        self._code = None
        self._grant_type = None
        self._password = None
        self._redirect_uri = None
        self._refresh_token = None
        self._username = None
        self.discriminator = None
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if code is not None:
            self.code = code
        if grant_type is not None:
            self.grant_type = grant_type
        if password is not None:
            self.password = password
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if username is not None:
            self.username = username

    @property
    def client_id(self):
        """Gets the client_id of this TokenRequest.  # noqa: E501

        Client Id assigned to 3rd party applications. Contact support@sensorpush.com to register you app.  # noqa: E501

        :return: The client_id of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TokenRequest.

        Client Id assigned to 3rd party applications. Contact support@sensorpush.com to register you app.  # noqa: E501

        :param client_id: The client_id of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this TokenRequest.  # noqa: E501

        Password associated with the client_id  # noqa: E501

        :return: The client_secret of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this TokenRequest.

        Password associated with the client_id  # noqa: E501

        :param client_secret: The client_secret of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def code(self):
        """Gets the code of this TokenRequest.  # noqa: E501

        This can be an authorization, access, or refresh token. Depending on which grant_type you are using.  # noqa: E501

        :return: The code of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TokenRequest.

        This can be an authorization, access, or refresh token. Depending on which grant_type you are using.  # noqa: E501

        :param code: The code of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def grant_type(self):
        """Gets the grant_type of this TokenRequest.  # noqa: E501

        Accepted values are password, refresh_token, and access_token  # noqa: E501

        :return: The grant_type of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this TokenRequest.

        Accepted values are password, refresh_token, and access_token  # noqa: E501

        :param grant_type: The grant_type of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._grant_type = grant_type

    @property
    def password(self):
        """Gets the password of this TokenRequest.  # noqa: E501

        User's password  # noqa: E501

        :return: The password of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TokenRequest.

        User's password  # noqa: E501

        :param password: The password of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this TokenRequest.  # noqa: E501

        Redirection url to the 3rd party application once the user has signed into the sensorpush logon. This value should be URL encoded.  # noqa: E501

        :return: The redirect_uri of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this TokenRequest.

        Redirection url to the 3rd party application once the user has signed into the sensorpush logon. This value should be URL encoded.  # noqa: E501

        :param redirect_uri: The redirect_uri of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def refresh_token(self):
        """Gets the refresh_token of this TokenRequest.  # noqa: E501

        Refresh token used to request new access tokens.  # noqa: E501

        :return: The refresh_token of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this TokenRequest.

        Refresh token used to request new access tokens.  # noqa: E501

        :param refresh_token: The refresh_token of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def username(self):
        """Gets the username of this TokenRequest.  # noqa: E501

        Email of the user to sign in.  # noqa: E501

        :return: The username of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TokenRequest.

        Email of the user to sign in.  # noqa: E501

        :param username: The username of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
